#COdigo base

import pandas as pd
from google.colab import drive
from pandas.core.frame import DataFrame
from pandas.core.tools.datetimes import to_datetime
from prophet import Prophet
from matplotlib import pyplot
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt


drive.mount('/content/drive')

dfd2005=pd.read_csv('/content/DIST 2005.csv',sep=',')

dfd2005['ds']=to_datetime(dfd2005['ds'])
#resultado2=pipsdatelist(10,16)
#automatic
model=Prophet(changepoint_prior_scale= 0.5,seasonality_prior_scale= 0.01, holidays_prior_scale= 0.01, seasonality_mode= 'additive', changepoint_range= 0.95)
#pips
#model=Prophet(changepoint_prior_scale= 0.5,seasonality_prior_scale= 0.01, holidays_prior_scale= 0.01, seasonality_mode= 'additive', changepoints=resultado2)
#model.add_seasonality('semiannual', period=90, fourier_order=8, mode='additive')

model.fit(dfd2005)
future = list()
for i in range(1, 10):
	date = '2022-%02d' % i
	future.append([date])
future = DataFrame(future)
future.columns = ['ds']
future['ds'] = to_datetime(future['ds'])
# use the model to make a forecast
forecast = model.predict(future)
# summarize the forecast
print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']])

# calculate MAE between expected and predicted values
y_true = dfd2005['y'][-9:].values
y_pred = forecast['yhat'].values
mae = mean_absolute_error(y_true, y_pred)
print('MAE: %.3f' % mae)
# plot expected vs actual
pyplot.plot(y_true, label='Actual')
pyplot.plot(y_pred, label='Predicted')
pyplot.legend()
pyplot.show()
print(model.changepoints)
##plot forecast
##model.plot(forecast)
##pyplot.show()
figure = model.plot(forecast)
for changepoint in model.changepoints:
    plt.axvline(changepoint,ls='--', lw=1)
